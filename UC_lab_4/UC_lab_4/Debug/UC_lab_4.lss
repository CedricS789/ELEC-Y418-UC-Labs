
AVRASM ver. 2.2.8  C:\Cloud\OneDrive - Université Libre de Bruxelles\ULB\Master\MA1\2024 - Q2\ELEC-Y418 - Sensors And Microsystem Electronics\2 - Labs\UC\2 - UC - Code\UC_lab_4\UC_lab_4\task_10_E.asm Tue Aug 26 13:52:25 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Cloud\OneDrive - Université Libre de Bruxelles\ULB\Master\MA1\2024 - Q2\ELEC-Y418 - Sensors And Microsystem Electronics\2 - Labs\UC\2 - UC - Code\UC_lab_4\UC_lab_4\task_10_E.asm(4): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Cloud\OneDrive - Université Libre de Bruxelles\ULB\Master\MA1\2024 - Q2\ELEC-Y418 - Sensors And Microsystem Electronics\2 - Labs\UC\2 - UC - Code\UC_lab_4\UC_lab_4\task_10_E.asm(4): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
                                 
                                 ; LED Matrix Display Driver with 4x4 Keypad for ATmega328P
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Pin Assignment: PB3=Data, PB4=Latch, PB5=Clock, PD7-4=Keypad Rows, PD3-0=Keypad Cols
                                 
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Constants
                                 .equ SR_DDR           = DDRB
                                 .equ SR_PORT          = PORTB
                                 .equ SR_PINREG        = PINB
                                 .equ SR_DATA_PIN      = 3
                                 .equ SR_CLOCK_PIN     = 5
                                 .equ SR_LATCH_PIN     = 4
                                 
                                 ; Timer0 Configuration
                                 .equ T0_LATCH_DELAY   = 240
                                 .equ TIMER0_PRESCALER = (1<<CS02)|(1<<CS01)|(1<<CS00)
                                 
                                 ; Keypad Configuration
                                 .equ KEYPAD_DDR       = DDRD
                                 .equ KEYPAD_PORT      = PORTD
                                 .equ KEYPAD_PIN       = PIND
                                 .equ KEYPAD_ROW_MASK  = 0b11110000
                                 .equ KEYPAD_COL_MASK  = 0b00001111
                                 .equ DEBOUNCE_CYCLES  = 5
                                 
                                 ; Keypad pins
                                 .equ ROW_1            = 7
                                 .equ ROW_2            = 6
                                 .equ ROW_3            = 5
                                 .equ ROW_4            = 4
                                 .equ COL_0            = 3
                                 .equ COL_1            = 2
                                 .equ COL_2            = 1
                                 .equ COL_3            = 0
                                 
                                 ; Keypad scan codes
                                 .equ KEY_7 = 1
                                 .equ KEY_8 = 2
                                 .equ KEY_9 = 3
                                 .equ KEY_F = 4
                                 .equ KEY_4 = 5
                                 .equ KEY_5 = 6
                                 .equ KEY_6 = 7
                                 .equ KEY_E = 8
                                 .equ KEY_1 = 9
                                 .equ KEY_2 = 10
                                 .equ KEY_3 = 11
                                 .equ KEY_D = 12
                                 .equ KEY_A = 13
                                 .equ KEY_0 = 14
                                 .equ KEY_B = 15
                                 .equ KEY_C = 16
                                 
                                 ; Display Matrix
                                 .equ MATRIX_ROWS      = 7
                                 .equ MATRIX_COLS      = 5
                                 .equ CHAR_BYTES       = 8
                                 .equ COLUMN_CYCLES    = 16
                                 .equ TARGET_BLOCK     = 14
                                 
                                 .def key_state        = r24
                                 .def debounce_counter = r23
                                 
                                 ; Derived Constants
                                 .equ SR_OUTPUT_MASK   = (1<<SR_DATA_PIN)|(1<<SR_LATCH_PIN)|(1<<SR_CLOCK_PIN)
                                 .equ ROW_RESET_MASK   = 0b01000000
                                 .equ MAX_ROW_INDEX    = MATRIX_ROWS - 1
                                 
                                 ; Memory allocation
                                 .dseg
                                 .org 0x0100
000100                           current_char:     .byte 1
                                 .cseg
                                 
                                 ; Macros
                                 .MACRO SHIFT_BIT_OUT
                                     sbi   SR_PORT, SR_DATA_PIN
                                     sbrs  @0, @1
                                     cbi   SR_PORT, SR_DATA_PIN
                                     sbi   SR_PINREG, SR_CLOCK_PIN
                                     sbi   SR_PINREG, SR_CLOCK_PIN
                                 .ENDMACRO
                                 
                                 .MACRO SAFE_REGISTER_CLEAR
                                     .if @0 != r1
                                         clr   @0
                                     .else
                                         .error "Cannot clear r1 - reserved zero register"
                                     .endif
                                 .ENDMACRO
                                 
                                 .MACRO BOUNDARY_CHECK_ROW
                                     cpi   @0, MAX_ROW_INDEX + 1
                                     brlo  PC + 2
                                     ldi   @0, MAX_ROW_INDEX
                                 .ENDMACRO
                                 
                                 ; Interrupt vectors
                                 .cseg
                                 .org 0x0000
000000 c010                          rjmp  system_init
                                 
                                 .org 0x0010
000010 c158                          rjmp  timer0_latch_completion_isr
                                 
                                 ; System initialization
                                 system_init:
000011 94f8                          cli
                                     
                                     ; Setup stack pointer
000012 e008                          ldi   r16, high(RAMEND)
000013 bf0e                          out   SPH, r16
000014 ef0f                          ldi   r16, low(RAMEND)
000015 bf0d                          out   SPL, r16
                                     
                                     ; Initialize hardware
000016 940e 0023                     call  init_shift_register_pins
000018 940e 0027                     call  init_keypad_pins
00001a 940e 002c                     call  configure_timer0_system
                                     
                                     ; Initialize software state
00001c 940e 003c                     call  initialize_display_state
00001e 940e 003f                     call  initialize_keypad_state
                                     
000020 2411                          clr   r1
000021 9478                          sei
000022 c0aa                          rjmp  main_application_loop
                                 
                                 init_shift_register_pins:
000023 e318                          ldi   r17, SR_OUTPUT_MASK
000024 b914                          out   SR_DDR, r17
000025 b915                          out   SR_PORT, r17
000026 9508                          ret
                                 
                                 init_keypad_pins:
000027 ef00                          ldi   r16, KEYPAD_ROW_MASK
000028 b90a                          out   KEYPAD_DDR, r16
000029 ef0f                          ldi   r16, 0xFF
00002a b90b                          out   KEYPAD_PORT, r16
00002b 9508                          ret
                                 
                                 configure_timer0_system:
                                     ; Configure normal mode
00002c 9100 0024                     lds   r16, TCCR0A
00002e 7f0c                          andi  r16, ~((1<<WGM01)|(1<<WGM00))
00002f 9300 0024                     sts   TCCR0A, r16
                                     
                                     ; Stop timer initially
000031 9100 0025                     lds   r16, TCCR0B
000033 7f00                          andi  r16, ~((1<<WGM02)|(1<<CS02)|(1<<CS01)|(1<<CS00))
000034 9300 0025                     sts   TCCR0B, r16
                                     
                                     ; Enable overflow interrupt
000036 9100 006e                     lds   r16, TIMSK0
000038 6001                          ori   r16, (1<<TOIE0)
000039 9300 006e                     sts   TIMSK0, r16
00003b 9508                          ret
                                 
                                 initialize_display_state:
00003c e066                          ldi   r22, MAX_ROW_INDEX
00003d e450                          ldi   r21, ROW_RESET_MASK
00003e 9508                          ret
                                 
                                 initialize_keypad_state:
00003f e300                          ldi   r16, '0'
000040 9300 0100                     sts   current_char, r16
000042 ef8f                          ldi   key_state, 0xFF
000043 2777                          clr   debounce_counter
000044 9508                          ret
                                 
                                 ; Keypad Interface Functions
                                 scan_keypad_nonblocking:
000045 930f                          push  r16
000046 931f                          push  r17
                                     
                                     ; Check debounce period
000047 2377                          tst   debounce_counter
000048 f471                          brne  skip_keypad_scan
                                     
                                     ; Perform keypad scan
000049 940e 005d                     call  scan_keyboard_matrix
                                     
                                     ; Check if key detected
00004b 3f0f                          cpi   r16, 0xFF
00004c f049                          breq  no_key_pressed
                                     
                                     ; Check if different from current state
00004d 1708                          cp    r16, key_state
00004e f059                          breq  scan_keypad_exit
                                     
                                     ; New key detected
00004f 2f80                          mov   key_state, r16
000050 940e 00b3                     call  map_key_to_character
000052 9300 0100                     sts   current_char, r16
000054 e075                          ldi   debounce_counter, DEBOUNCE_CYCLES
000055 c004                          rjmp  scan_keypad_exit
                                     
                                 no_key_pressed:
000056 ef8f                          ldi   key_state, 0xFF
                                     
                                 skip_keypad_scan:
000057 2377                          tst   debounce_counter
000058 f009                          breq  scan_keypad_exit
000059 957a                          dec   debounce_counter
                                     
                                 scan_keypad_exit:
00005a 911f                          pop   r17
00005b 910f                          pop   r16
00005c 9508                          ret
                                 
                                 scan_keyboard_matrix:
00005d 931f                          push  r17
00005e 932f                          push  r18
00005f 933f                          push  r19
000060 934f                          push  r20
                                     
000061 ef3f                          ldi   r19, 0xFF    ; Default: no key found
000062 e041                          ldi   r20, 1       ; Row counter (1-4)
                                     
                                 scan_next_row:
                                     ; Set all rows HIGH
000063 9a5f                          sbi   PORTD, ROW_1
000064 9a5e                          sbi   PORTD, ROW_2
000065 9a5d                          sbi   PORTD, ROW_3
000066 9a5c                          sbi   PORTD, ROW_4
                                     
                                     ; Activate current row (set LOW)
000067 3041                          cpi   r20, 1
000068 f039                          breq  activate_row_1
000069 3042                          cpi   r20, 2
00006a f039                          breq  activate_row_2
00006b 3043                          cpi   r20, 3
00006c f039                          breq  activate_row_3
00006d 3044                          cpi   r20, 4
00006e f039                          breq  activate_row_4
00006f c024                          rjmp  scan_complete
                                     
                                 activate_row_1:
000070 985f                          cbi   PORTD, ROW_1
000071 c005                          rjmp  read_columns
                                 activate_row_2:
000072 985e                          cbi   PORTD, ROW_2
000073 c003                          rjmp  read_columns
                                 activate_row_3:
000074 985d                          cbi   PORTD, ROW_3
000075 c001                          rjmp  read_columns
                                 activate_row_4:
000076 985c                          cbi   PORTD, ROW_4
                                     
                                 read_columns:
000077 0000                          nop    ; Wait for signals to settle
000078 0000                          nop
000079 0000                          nop
00007a 0000                          nop
                                     
00007b b119                          in    r17, PIND    ; Read column states
                                     
                                     ; Check each column
00007c ff13                          sbrs  r17, COL_0
00007d 940e 009a                     call  calculate_key_code_col0
00007f ff12                          sbrs  r17, COL_1
000080 940e 009c                     call  calculate_key_code_col1
000082 ff11                          sbrs  r17, COL_2
000083 940e 009e                     call  calculate_key_code_col2
000085 ff10                          sbrs  r17, COL_3
000086 940e 00a0                     call  calculate_key_code_col3
                                     
                                     ; Anti-ghosting check
000088 2f21                          mov   r18, r17
000089 9520                          com   r18
00008a 702f                          andi  r18, 0x0F
00008b 940e 00a8                     call  count_set_bits
00008d 3002                          cpi   r16, 2
00008e f420                          brsh  ghost_detected
                                     
00008f 9543                          inc   r20
000090 3045                          cpi   r20, 5
000091 f288                          brlo  scan_next_row
000092 c001                          rjmp  scan_complete
                                     
                                 ghost_detected:
000093 ef3f                          ldi   r19, 0xFF
                                     
                                 scan_complete:
000094 2f03                          mov   r16, r19
000095 914f                          pop   r20
000096 913f                          pop   r19
000097 912f                          pop   r18
000098 911f                          pop   r17
000099 9508                          ret
                                 
                                 ; Key code calculation helpers
                                 calculate_key_code_col0:
00009a e020                          ldi   r18, 0
00009b c005                          rjmp  store_key_with_row
                                 
                                 calculate_key_code_col1:
00009c e021                          ldi   r18, 1
00009d c003                          rjmp  store_key_with_row
                                 
                                 calculate_key_code_col2:
00009e e022                          ldi   r18, 2
00009f c001                          rjmp  store_key_with_row
                                 
                                 calculate_key_code_col3:
0000a0 e023                          ldi   r18, 3
                                     
                                 store_key_with_row:
0000a1 2f34                          mov   r19, r20
0000a2 953a                          dec   r19
0000a3 0f33                          lsl   r19
0000a4 0f33                          lsl   r19
0000a5 0f32                          add   r19, r18
0000a6 9533                          inc   r19
0000a7 9508                          ret
                                 
                                 count_set_bits:
0000a8 931f                          push  r17
0000a9 e000                          ldi   r16, 0
0000aa 2f12                          mov   r17, r18
                                     
                                 count_loop:
0000ab 2311                          tst   r17
0000ac f021                          breq  count_done
0000ad fd10                          sbrc  r17, 0
0000ae 9503                          inc   r16
0000af 9516                          lsr   r17
0000b0 cffa                          rjmp  count_loop
                                     
                                 count_done:
0000b1 911f                          pop   r17
0000b2 9508                          ret
                                 
                                 map_key_to_character:
0000b3 93ff                          push  ZH
0000b4 93ef                          push  ZL
                                     
                                     ; Bounds checking
0000b5 3001                          cpi   r16, 1
0000b6 f050                          brlo  map_default_char
0000b7 3101                          cpi   r16, 17
0000b8 f440                          brsh  map_default_char
                                     
                                     ; Convert to table index
0000b9 950a                          dec   r16
                                     
                                     ; Calculate address
0000ba e0f1                          ldi   ZH, high(keypad_char_map * 2)
0000bb e8ea                          ldi   ZL, low(keypad_char_map * 2)
0000bc 0fe0                          add   ZL, r16
0000bd f408                          brcc  no_carry_map
0000be 95f3                          inc   ZH
                                 no_carry_map:
0000bf 9104                          lpm   r16, Z
0000c0 c001                          rjmp  map_exit
                                     
                                 map_default_char:
0000c1 e30f                          ldi   r16, '?'
                                     
                                 map_exit:
0000c2 91ef                          pop   ZL
0000c3 91ff                          pop   ZH
0000c4 9508                          ret
                                 
                                 ; Keypad character mapping table
                                 keypad_char_map:
0000c5 3837
0000c6 4639                          .db   '7', '8', '9', 'F'    ; Row 1
0000c7 3534
0000c8 4536                          .db   '4', '5', '6', 'E'    ; Row 2
0000c9 3231
0000ca 4433                          .db   '1', '2', '3', 'D'    ; Row 3
0000cb 3041
0000cc 4342                          .db   'A', '0', 'B', 'C'    ; Row 4
                                 
                                 ; Main application loop
                                 main_application_loop:
0000cd 940e 0173                     call  refresh_current_display_row
0000cf 940e 0045                     call  scan_keypad_nonblocking
0000d1 cffb                          rjmp  main_application_loop
                                 
                                 ; =============================================================================
                                 ; CHARACTER BITMAP LOOKUP FUNCTIONS
                                 ; Purpose: Map ASCII characters to bitmap addresses in program memory
                                 ; =============================================================================
                                 ;
                                 ; HOW CHARACTER DISPLAY WORKS:
                                 ; Each character (like 'A', '5', 'F') is represented as a bitmap - a pattern of
                                 ; dots that forms the visual shape of the character. Our display is 7 rows by 
                                 ; 5 columns, so each character is stored as 7 bytes (one per row) plus 1 padding byte.
                                 ;
                                 ; EXAMPLE: The character 'A' might look like:
                                 ; Row 0: 01110  (bits: 0b01110 = 0x0E)
                                 ; Character bitmap lookup
                                 get_character_bitmap_address:
0000d2 93ff                          push  ZH
0000d3 93ef                          push  ZL
                                     
                                     ; Check supported characters
0000d4 3300                          cpi   r16, '0'
0000d5 f109                          breq  map_char_0
0000d6 3301                          cpi   r16, '1'
0000d7 f111                          breq  map_char_1
0000d8 3302                          cpi   r16, '2'
0000d9 f119                          breq  map_char_2
0000da 3303                          cpi   r16, '3'
0000db f121                          breq  map_char_3
0000dc 3304                          cpi   r16, '4'
0000dd f129                          breq  map_char_4
0000de 3305                          cpi   r16, '5'
0000df f131                          breq  map_char_5
0000e0 3306                          cpi   r16, '6'
0000e1 f139                          breq  map_char_6
0000e2 3307                          cpi   r16, '7'
0000e3 f141                          breq  map_char_7
0000e4 3308                          cpi   r16, '8'
0000e5 f149                          breq  map_char_8
0000e6 3309                          cpi   r16, '9'
0000e7 f151                          breq  map_char_9
0000e8 3401                          cpi   r16, 'A'
0000e9 f159                          breq  map_char_A
0000ea 3402                          cpi   r16, 'B'
0000eb f161                          breq  map_char_B
0000ec 3403                          cpi   r16, 'C'
0000ed f169                          breq  map_char_C
0000ee 3404                          cpi   r16, 'D'
0000ef f171                          breq  map_char_D
0000f0 3405                          cpi   r16, 'E'
0000f1 f179                          breq  map_char_E
0000f2 3406                          cpi   r16, 'F'
0000f3 f181                          breq  map_char_F
                                     
                                     ; Default case
0000f4 eb0a                          ldi   r16, low(char_7 * 2)
0000f5 e012                          ldi   r17, high(char_7 * 2)
0000f6 c02f                          rjmp  bitmap_address_exit
                                 
                                 map_char_0:
0000f7 e802                          ldi   r16, low(char_0 * 2)
0000f8 e012                          ldi   r17, high(char_0 * 2)
0000f9 c02c                          rjmp  bitmap_address_exit
                                 map_char_1:
0000fa e80a                          ldi   r16, low(char_1 * 2)
0000fb e012                          ldi   r17, high(char_1 * 2)
0000fc c029                          rjmp  bitmap_address_exit
                                 map_char_2:
0000fd e902                          ldi   r16, low(char_2 * 2)
0000fe e012                          ldi   r17, high(char_2 * 2)
0000ff c026                          rjmp  bitmap_address_exit
                                 map_char_3:
000100 e90a                          ldi   r16, low(char_3 * 2)
000101 e012                          ldi   r17, high(char_3 * 2)
000102 c023                          rjmp  bitmap_address_exit
                                 map_char_4:
000103 ea02                          ldi   r16, low(char_4 * 2)
000104 e012                          ldi   r17, high(char_4 * 2)
000105 c020                          rjmp  bitmap_address_exit
                                 map_char_5:
000106 ea0a                          ldi   r16, low(char_5 * 2)
000107 e012                          ldi   r17, high(char_5 * 2)
000108 c01d                          rjmp  bitmap_address_exit
                                 map_char_6:
000109 eb02                          ldi   r16, low(char_6 * 2)
00010a e012                          ldi   r17, high(char_6 * 2)
00010b c01a                          rjmp  bitmap_address_exit
                                 map_char_7:
00010c eb0a                          ldi   r16, low(char_7 * 2)
00010d e012                          ldi   r17, high(char_7 * 2)
00010e c017                          rjmp  bitmap_address_exit
                                 map_char_8:
00010f ec02                          ldi   r16, low(char_8 * 2)
000110 e012                          ldi   r17, high(char_8 * 2)
000111 c014                          rjmp  bitmap_address_exit
                                 map_char_9:
000112 ec0a                          ldi   r16, low(char_9 * 2)
000113 e012                          ldi   r17, high(char_9 * 2)
000114 c011                          rjmp  bitmap_address_exit
                                 map_char_A:
000115 e502                          ldi   r16, low(char_A * 2)
000116 e012                          ldi   r17, high(char_A * 2)
000117 c00e                          rjmp  bitmap_address_exit
                                 map_char_B:
000118 e50a                          ldi   r16, low(char_B * 2)
000119 e012                          ldi   r17, high(char_B * 2)
00011a c00b                          rjmp  bitmap_address_exit
                                 map_char_C:
00011b e602                          ldi   r16, low(char_C * 2)
00011c e012                          ldi   r17, high(char_C * 2)
00011d c008                          rjmp  bitmap_address_exit
                                 map_char_D:
00011e e60a                          ldi   r16, low(char_D * 2)
00011f e012                          ldi   r17, high(char_D * 2)
000120 c005                          rjmp  bitmap_address_exit
                                 map_char_E:
000121 e702                          ldi   r16, low(char_E * 2)
000122 e012                          ldi   r17, high(char_E * 2)
000123 c002                          rjmp  bitmap_address_exit
                                 map_char_F:
000124 e70a                          ldi   r16, low(char_F * 2)
000125 e012                          ldi   r17, high(char_F * 2)
                                     
                                 bitmap_address_exit:
000126 91ef                          pop   ZL
000127 91ff                          pop   ZH
000128 9508                          ret
                                 
                                 ; Character bitmap data (7x5 pixel font)
                                 character_bitmap_table:
                                 
000129 0906
00012a 0909
00012b 090f
00012c 0009                      char_A:  .db 0b00110, 0b01001, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0
00012d 090e
00012e 0e09
00012f 0909
000130 000e                      char_B:  .db 0b01110, 0b01001, 0b01001, 0b01110, 0b01001, 0b01001, 0b01110, 0
000131 0807
000132 0808
000133 0808
000134 0007                      char_C:  .db 0b00111, 0b01000, 0b01000, 0b01000, 0b01000, 0b01000, 0b00111, 0
000135 090e
000136 0909
000137 0909
000138 000e                      char_D:  .db 0b01110, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b01110, 0
000139 080f
00013a 0e08
00013b 0808
00013c 000f                      char_E:  .db 0b01111, 0b01000, 0b01000, 0b01110, 0b01000, 0b01000, 0b01111, 0
00013d 080f
00013e 0e08
00013f 0808
000140 0008                      char_F:  .db 0b01111, 0b01000, 0b01000, 0b01110, 0b01000, 0b01000, 0b01000, 0
                                 
000141 090f
000142 0909
000143 0909
000144 000f                      char_0:  .db 0b01111, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b01111, 0
000145 0602
000146 020a
000147 0202
000148 0002                      char_1:  .db 0b00010, 0b00110, 0b01010, 0b00010, 0b00010, 0b00010, 0b00010, 0
000149 010f
00014a 0f01
00014b 0808
00014c 000f                      char_2:  .db 0b01111, 0b00001, 0b00001, 0b01111, 0b01000, 0b01000, 0b01111, 0
00014d 010f
00014e 0701
00014f 0101
000150 000f                      char_3:  .db 0b01111, 0b00001, 0b00001, 0b00111, 0b00001, 0b00001, 0b01111, 0
000151 0909
000152 0f09
000153 0101
000154 0001                      char_4:  .db 0b01001, 0b01001, 0b01001, 0b01111, 0b00001, 0b00001, 0b00001, 0
000155 080f
000156 0f08
000157 0101
000158 000f                      char_5:  .db 0b01111, 0b01000, 0b01000, 0b01111, 0b00001, 0b00001, 0b01111, 0
000159 080f
00015a 0f08
00015b 0909
00015c 000f                      char_6:  .db 0b01111, 0b01000, 0b01000, 0b01111, 0b01001, 0b01001, 0b01111, 0
00015d 010f
00015e 0201
00015f 0404
000160 0004                      char_7:  .db 0b01111, 0b00001, 0b00001, 0b00010, 0b00100, 0b00100, 0b00100, 0
000161 090f
000162 0f09
000163 0909
000164 000f                      char_8:  .db 0b01111, 0b01001, 0b01001, 0b01111, 0b01001, 0b01001, 0b01111, 0
000165 090f
000166 0f09
000167 0101
000168 000f                      char_9:  .db 0b01111, 0b01001, 0b01001, 0b01111, 0b00001, 0b00001, 0b01111, 0
                                 
                                 character_table_end:
                                 
                                 ; Timer0 overflow ISR - completes latch pulse
                                 timer0_latch_completion_isr:
000169 ef00                          ldi   r16, T0_LATCH_DELAY
00016a 9300 0026                     sts   TCNT0, r16
00016c 9a1c                          sbi   SR_PINREG, SR_LATCH_PIN
00016d 9100 0025                     lds   r16, TCCR0B
00016f 7f08                          andi  r16, ~((1<<CS02)|(1<<CS01)|(1<<CS00))
000170 9300 0025                     sts   TCCR0B, r16
000172 9518                          reti
                                 
                                 ; -----------------------------------------------------------------------------
                                 ; Function: refresh_current_display_row
                                 ; Purpose: Complete single-row refresh cycle with automatic row advancement  
                                 ; 
                                 ; THIS IS THE MOST COMPLEX FUNCTION - LET'S BREAK IT DOWN:
                                 ; 
                                 ; WHAT LED MATRIX MULTIPLEXING MEANS:
                                 ; Our LED matrix has 7 rows and many columns, but we can only control one row
                                 ; at a time. To display a complete character, we rapidly cycle through rows:
                                 ; Row 0 â Row 1 â Row 2 â ... â Row 6 â Row 0 â ...
                                 ; Each time, we send the correct column data for that row, then move to the next row.
                                 ; If we do this fast enough (>50 times per second), human eyes see a stable image.
                                 ; 
                                 ; SHIFT REGISTER OPERATION:
                                 ; We use a shift register (STP08DP05) to control many LEDs with just 3 wires:
                                 ; 1. Send data bits one by one (87 bits total)
                                 ; 2. Generate a latch pulse to transfer data to LED outputs
                                 ; 3. Only the target block shows our character, others show nothing
                                 ; 
                                 ; ALGORITHM STEPS:
                                 ; 1. FetchâShiftâLatchâAdvance in optimized sequence
                                 ; 2. Get character bitmap data for current row
                                 ; 3. Send 80 column bits (16 blocks Ã 5 bits each)
                                 ; 4. Send 7 row selector bits (only 1 bit high = active row)
                                 ; 5. Generate precise latch pulse using Timer0
                                 ; 6. Advance to next row for following iteration
                                 ; 
                                 ; Registers: 
                                 ;   Input:  r21 (current row selector), r22 (current row index 0-6)  
                                 ;   Output: r21, r22 (advanced to next row with wraparound)
                                 ;   Temp:   r16, r17, r18, r19, r20 (automatically saved/restored)
                                 ; Hardware: Generates 87 clock pulses + precision latch pulse
                                 ; -----------------------------------------------------------------------------
                                 refresh_current_display_row:
                                     ; PRESERVE WORKING REGISTERS ON STACK (LIFO order)  
                                     ; We need several registers for calculations. Save them so we don't
                                     ; corrupt the main program's data.
000173 930f                          push  r16                          ; Timer control register
000174 931f                          push  r17                          ; General purpose calculations
000175 932f                          push  r18                          ; Loop counter for shift register
000176 933f                          push  r19                          ; Current block index (0-15)
                                 
                                 fetch_row_bitmap_data:
                                     ; GET CURRENT CHARACTER TO DISPLAY FROM KEYPAD INPUT
000177 9100 0100                     lds   r16, current_char            ; Load ASCII character from SRAM
                                                                        ; This was set by keypad scanning
000179 940e 00d2                     call  get_character_bitmap_address ; Convert ASCII to bitmap memory address
                                                                        ; Returns r17:r16 = program memory address
00017b 2fe0                          mov   ZL, r16                      ; Z register low byte = address low byte
00017c 2ff1                          mov   ZH, r17                      ; Z register high byte = address high byte
                                                                        ; Z register now points to character bitmap
                                     
                                     ; APPLY BOUNDS CHECKING TO PREVENT BUFFER OVERFLOW
00017d 3067
00017e f008
00017f e066                          BOUNDARY_CHECK_ROW r22             ; Macro: clamp r22 to valid range (0-6)
                                                                        ; Prevents reading beyond character data
                                     
                                     ; CALCULATE FINAL BYTE ADDRESS FOR CURRENT ROW
                                     ; Each character has 8 bytes (rows 0-7), we want byte [r22]
000180 0fe6                          add   ZL, r22                      ; Add row offset to address low byte
000181 1df1                          adc   ZH, r1                       ; Add carry to address high byte (r1=0)
                                                                        ; Z now points to specific row bitmap
000182 9144                          lpm   r20, Z                       ; lpm = "Load Program Memory"
                                                                        ; Load 5-bit row pattern into r20
                                 
                                 transmit_column_data:
                                     ; TRANSMIT COLUMN DATA FOR ALL 16 BLOCKS
                                     ; The LED driver controls 80 outputs in 16 blocks of 5 outputs each.
                                     ; Only TARGET_BLOCK gets our character data, others get zeros.
000183 e120                          ldi   r18, COLUMN_CYCLES           ; COLUMN_CYCLES = 16 (number of blocks)
000184 2733                          clr   r19                          ; Current block index (0-15)
                                     
                                 column_transmission_loop:
                                     ; CHECK IF THIS IS THE TARGET BLOCK
                                     ; Only one block shows our character, others are dark
000185 303e                          cpi   r19, TARGET_BLOCK            ; Compare current block with TARGET_BLOCK (14)
000186 f4d1                          brne  send_zero_block              ; If not target block, send zeros
                                     
                                 send_character_block:
                                     ; SEND THE ACTUAL CHARACTER DATA FOR THIS BLOCK
                                     ; Use our SHIFT_BIT_OUT macro to send 5 bits with proper timing
000187 9a2b
000188 ff40
000189 982b
00018a 9a1d
00018b 9a1d                          SHIFT_BIT_OUT r20, 0               ; Transmit bit 0 (rightmost column)
00018c 9a2b
00018d ff41
00018e 982b
00018f 9a1d
000190 9a1d                          SHIFT_BIT_OUT r20, 1               ; Transmit bit 1  
000191 9a2b
000192 ff42
000193 982b
000194 9a1d
000195 9a1d                          SHIFT_BIT_OUT r20, 2               ; Transmit bit 2 (middle column)
000196 9a2b
000197 ff43
000198 982b
000199 9a1d
00019a 9a1d                          SHIFT_BIT_OUT r20, 3               ; Transmit bit 3
00019b 9a2b
00019c ff44
00019d 982b
00019e 9a1d
00019f 9a1d                          SHIFT_BIT_OUT r20, 4               ; Transmit bit 4 (leftmost column)
0001a0 c019                          rjmp  next_block                   ; Jump to block counter update
                                     
                                 send_zero_block:
                                     ; SEND ZEROS FOR NON-TARGET BLOCKS
                                     ; These blocks will be dark (r1 is always 0)
0001a1 9a2b
0001a2 fe10
0001a3 982b
0001a4 9a1d
0001a5 9a1d                          SHIFT_BIT_OUT r1, 0                ; Transmit 0 (r1 bit 0 = 0)
0001a6 9a2b
0001a7 fe11
0001a8 982b
0001a9 9a1d
0001aa 9a1d                          SHIFT_BIT_OUT r1, 1                ; Transmit 0 (r1 bit 1 = 0)
0001ab 9a2b
0001ac fe12
0001ad 982b
0001ae 9a1d
0001af 9a1d                          SHIFT_BIT_OUT r1, 2                ; Transmit 0 (r1 bit 2 = 0)
0001b0 9a2b
0001b1 fe13
0001b2 982b
0001b3 9a1d
0001b4 9a1d                          SHIFT_BIT_OUT r1, 3                ; Transmit 0 (r1 bit 3 = 0)
0001b5 9a2b
0001b6 fe14
0001b7 982b
0001b8 9a1d
0001b9 9a1d                          SHIFT_BIT_OUT r1, 4                ; Transmit 0 (r1 bit 4 = 0)
                                     
                                 next_block:
0001ba 9533                          inc   r19                          ; Move to next block (0â1â2â...â15)
0001bb 952a                          dec   r18                          ; Decrement remaining blocks counter
0001bc f641                          brne  column_transmission_loop     ; Continue until all 16 blocks sent
                                 
                                 insert_row_separator:
                                     ; INSERT CLEAN SEPARATOR BETWEEN COLUMN AND ROW DATA  
                                     ; This ensures clean timing between different data types
0001bd 982b                          cbi   SR_PORT, SR_DATA_PIN         ; Ensure data line is LOW (0)
0001be 9a1d                          sbi   SR_PINREG, SR_CLOCK_PIN      ; Generate separator clock pulse (toggle)
0001bf 9a1d                          sbi   SR_PINREG, SR_CLOCK_PIN      ; Complete clock cycle (toggle back)
                                 
                                 transmit_row_select_data:
                                     ; TRANSMIT 7-BIT ROW SELECTOR (one-hot encoding, MSB first)
                                     ; Only one bit is HIGH at a time, indicating which physical row to activate
                                     ; We shift MSB first because that's how the shift register works
0001c0 9a2b
0001c1 ff56
0001c2 982b
0001c3 9a1d
0001c4 9a1d                          SHIFT_BIT_OUT r21, 6               ; Row 6 selector bit (MSB)
0001c5 9a2b
0001c6 ff55
0001c7 982b
0001c8 9a1d
0001c9 9a1d                          SHIFT_BIT_OUT r21, 5               ; Row 5 selector bit
0001ca 9a2b
0001cb ff54
0001cc 982b
0001cd 9a1d
0001ce 9a1d                          SHIFT_BIT_OUT r21, 4               ; Row 4 selector bit  
0001cf 9a2b
0001d0 ff53
0001d1 982b
0001d2 9a1d
0001d3 9a1d                          SHIFT_BIT_OUT r21, 3               ; Row 3 selector bit
0001d4 9a2b
0001d5 ff52
0001d6 982b
0001d7 9a1d
0001d8 9a1d                          SHIFT_BIT_OUT r21, 2               ; Row 2 selector bit
0001d9 9a2b
0001da ff51
0001db 982b
0001dc 9a1d
0001dd 9a1d                          SHIFT_BIT_OUT r21, 1               ; Row 1 selector bit
0001de 9a2b
0001df ff50
0001e0 982b
0001e1 9a1d
0001e2 9a1d                          SHIFT_BIT_OUT r21, 0               ; Row 0 selector bit (LSB)
                                 
                                 advance_to_next_row:
0001e3 956a                          dec   r22
0001e4 9556                          lsr   r21
0001e5 f411                          brne  initiate_hardware_latch
0001e6 e066                          ldi   r22, MAX_ROW_INDEX
0001e7 e450                          ldi   r21, ROW_RESET_MASK
                                 
                                 initiate_hardware_latch:
0001e8 9a1c                          sbi   SR_PINREG, SR_LATCH_PIN
0001e9 9100 0025                     lds   r16, TCCR0B
0001eb 6007                          ori   r16, TIMER0_PRESCALER
0001ec 9300 0025                     sts   TCCR0B, r16
                                     
0001ee 913f                          pop   r19
0001ef 912f                          pop   r18
0001f0 911f                          pop   r17
0001f1 910f                          pop   r16
0001f2 9508                          ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   7 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  80 r17:  39 r18:  15 r19:  16 r20:  16 
r21:  10 r22:   6 r23:   5 r24:   4 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   8 r31:   8 
Registers used: 13 out of 35 (37.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   3 adiw  :   0 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  24 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :   4 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  15 cbi   :  22 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   1 cpc   :   0 
cpi   :  27 cpse  :   0 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   5 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  61 lds   :   6 lpm   :   4 lsl   :   2 
lsr   :   2 mov   :   7 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   4 or    :   0 ori   :   2 out   :   6 pop   :  15 
push  :  15 rcall :   0 ret   :  12 reti  :   1 rjmp  :  32 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  59 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   1 sbrs  :  21 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   8 
sub   :   0 subi  :   0 swap  :   0 tst   :   3 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003e6    824    144    968   32768   3.0%
[.dseg] 0x000100 0x000101      0      1      1    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
